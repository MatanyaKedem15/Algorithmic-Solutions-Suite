function main()
    disp('ת"ז 206728743')
    % שאלה 1
    disp('שאלה 1')
    % קבלת מטריצה ווקטור מהמשתמש
    A = input('נא להכניס מטריצה בגודל 4*4');
    b = input('נא להכניס וקטור בגודל 4');

    % בדיקה האם המטריצה והוקטור בגודל 4 הרצוי
    if size(A) ~= [4, 4]
        error(' נא להכניס מטריצה בגודל 4*4');
    end
    if size(b) ~= [4, 1]
        error(' נא להכניס וקטור בגודל 4');
    end
    [x, is_invertible] = Q1(A, b); % קריאה לפונקציה
    % הדפסת התוצאות
    if is_invertible
        disp(' הפתרון למערכת הליניארית הוא:');
        disp(x);
    else
        disp(' המטריצה אינה הפיכה');
    end

    % שאלה 2
    Q2();

    % שאלה 3
    disp(' שאלה 3')
    num_rows = 43;
    time = linspace(0, 42, num_rows)'; % יצירת וקטור זמן בטווח של 0 ע  42 שניות
    temperature = 20 + 5 * sin(linspace(0, 3*pi, num_rows))'; % יצירת וקטור טמפרטורה כתלות בזמן
    data = [time, temperature]; % יצירת מטריצה של הנתונים
    writematrix(data, 'data.csv'); % שמירת הנתונים כקובץ cvs

    Q3(); % קריאה לפונקציה

    % שאלה 4
    Q4();

    % שאלה 5
    disp(' שאלה 5')
    x_range = [-5, 5]; % הגדרת התחום
    tolerance = 0.001; % רמת דיוק
    [root, iterations] = Q5_1(@(x) (x.^2 + 4.*sin(x)), x_range, tolerance); % קריאה לפונקציה למציאת המינימום
    Q5_2(@(x) (x.^3 - 2.*x.^2 + 4.*x - 8), x_range, root); % שרטוט הפונקציה ונקודת המינימום

    % שאלה 6
    disp(' שאלה 6')
    % רשימת התלמידים והציונים שלהם
    students = {'אבי', 'יוסי', 'אנה', 'סופי', 'אלעד'};
    grades = [
        75, 80, 72;  % ציונים של אבי
        85, 90, 88;  % ציונים של יוסי
        60, 70, 65;  % ציונים של אנה
        92, 95, 90;  % ציונים של סופי
        78, 82, 80;  % ציונים של אלעד
        ];
   Q6(students, grades);

   % שאלה 7
   disp(' שאלה 7')
    x_range = [1, 3]; % הגדרת תחום
    tolerance = 0.001; % רמת דיוק
    
    [root, iterations] = Q7_1(@(x) (x.^3 - 2.*x.^2 + 4.*x - 8), x_range, tolerance);  % קריאה לפונקציה למציאת השורש
    
    Q7_2(@(x) (x.^3 - 2.*x.^2 + 4.*x - 8), x_range, root); % שרטוט הפונקציה ונקודת השורש

    % שאלה 8
    Q8();

    % שאלה 9
    v0 = 20; % מהירות התחלתית (מטרים לשנייה)
    theta = pi / 4; % זווית שיגור (רדיאנים)
    g = 9.81; % תאוצת הכובד (מטרים לשנייה בריבוע)
    t_total = 3; % זמן האנימציה (שניות)
    t_step = 0.01; % גודל צעד הזמן (שניות)
    
    t = 0:t_step:t_total;  % יצירת נתוני זמן
    
    % חישוב מיקום הכדור בכל נקודת זמן
    x = v0 * cos(theta) * t;
    y = v0 * sin(theta) * t - 0.5 * g * t.^2;
    
    % יצירת האנימציה
    figure;
    for k = 1:length(t)
        clf; % ניקוי הגרף בכל חזרה
        hold on;
        
        plot(x(1:k), y(1:k), 'b-', 'LineWidth', 2);  % שרטוט מסלול הכדור עד לנקודת הזמן הנוכחית
        
        plot(x(k), y(k), 'ro', 'MarkerSize', 10, 'MarkerFaceColor', 'r'); % שרטוט הכדור בנקודת הזמן הנוכחית
        
        % כותרות וצירים
        xlabel(' מרחק אופקי (מטרים)');
        ylabel('גובה אנכי (מטרים)');
        title(sprintf(' מסלול פרבולי של כדור'));
        axis([0, max(x), 0, max(y)]);
        grid on;
        
        drawnow;
        pause(t_step);
    end

 

end

